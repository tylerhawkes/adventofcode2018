#ip 2
0  addi 2 16 2 //Add register 2 and 16 and store in register 2 - effectively jump to instruction 17
1  seti 1 1 1 //set register 1 to 1
2  seti 1 4 3 //set register 3 to 1
3  mulr 1 3 5 //multiply registers 1 and 3 together and store in register 5
4  eqrr 5 4 5 //if register 5 is equal to register 4 store 1 else 0 in register 5
5  addr 5 2 2 //add register 5 to register 2 or conditionally skip step 6
6  addi 2 1 2 // skip step 7
7  addr 1 0 0 // add registers 1 and 0 and store in register 0
8  addi 3 1 3 // increment register 3 by 1
9  gtrr 3 4 5 // if register 3 > register 4 then 1 else 0 in register 5
10 addr 2 5 2 // if register 5 = 1 optionally skip instruction 11
11 seti 2 4 2 // Set register 2 back to 2 or move back to instruction 3 // this needs to be skipped to terminate the program
12 addi 1 1 1 // Increment register 1 by 1
13 gtrr 1 4 5 // If register 1 is greater than register 4 then 1 else 0 in register 5
14 addr 5 2 2 // If register 5 = 1 skip instruction 15 else execute 15
15 seti 1 0 2 // Go back to instruction 2 // this also needs to be skipped to terminate the program
16 mulr 2 2 2 // square register two or exit the program
17 addi 4 2 4 // increment register 4 by 2 #4 = 2
18 mulr 4 4 4 // square register 4 #4 = 4
19 mulr 2 4 4 // multiply register 4 by 19 #4 = 76
20 muli 4 11 4 // multiply register 4 by 11 #4 = 836
21 addi 5 1 5 // increment register 5 by 1 #5 = 1
22 mulr 5 2 5 // multiply register 5 by 22 #5 = 22
23 addi 5 17 5 // add 17 to register 5 #5 = 39
24 addr 4 5 4 // add register 5 to register 4 #4 = 875
25 addr 2 0 2 // add register 0 to register 2 if register 0 has 0 then execute 26 else execute 27
26 seti 0 9 2 // set register 2 to 0 or go back to instruction 1

// 27 to 35 executed if register 0 starts out at 1
27 setr 2 3 5 // set register 5 to 27 #5 = 27
28 mulr 5 2 5 // multiply register 5 by 28 #5 = 756
29 addr 2 5 5 // add 29 to register 5 #5 = 785
30 mulr 2 5 5 // multiply register 5 by 30 #5 = 23550
31 muli 5 14 5 // multiply register 5 by 14 #5 = 329700
32 mulr 5 2 5 // multiply register 5 by 32 #5 = 10550400
33 addr 4 5 4 // add register 5 to register 4 #4 = 10551275
34 seti 0 9 0 // set register 0 to 0
35 seti 0 6 2 // set regisetr 2 to zero or go execute instruction 1

r.4 never changes once program gets into loop
inst. 14 requires r.1 be > r.4 or 10551275 to terminate
r.1 is incremented whenever step 12 is run

